// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ProjetsControllerFindAllData, ProjetsControllerFindAllResponse, ProjetsControllerFindAllError, ProjetsControllerCreateData, ProjetsControllerCreateResponse, ProjetsControllerCreateError, ProjetsControllerFindOneData, ProjetsControllerFindOneResponse, ProjetsControllerFindOneError, ProjetsControllerUpdateData, ProjetsControllerUpdateResponse, ProjetsControllerUpdateError, ProjetsControllerGetExtraFieldsData, ProjetsControllerGetExtraFieldsResponse, ProjetsControllerGetExtraFieldsError, ProjetsControllerUpdateExtraFieldsData, ProjetsControllerUpdateExtraFieldsResponse, ProjetsControllerUpdateExtraFieldsError, ProjetsControllerCreateBulkData, ProjetsControllerCreateBulkResponse, ProjetsControllerCreateBulkError, ServicesControllerGetServicesByProjectIdData, ServicesControllerGetServicesByProjectIdResponse, ServicesControllerGetServicesByProjectIdError, ServicesControllerCreateData, ServicesControllerCreateResponse, ServicesControllerCreateError, ServicesControllerCreateServiceContextData, ServicesControllerCreateServiceContextResponse, ServicesControllerCreateServiceContextError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all Projets
 */
export const projetsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ProjetsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjetsControllerFindAllResponse, ProjetsControllerFindAllError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projets',
        ...options
    });
};

export const projetsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ProjetsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjetsControllerCreateResponse, ProjetsControllerCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get specific Projet by id
 */
export const projetsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ProjetsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjetsControllerFindOneResponse, ProjetsControllerFindOneError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projets/{id}',
        ...options
    });
};

/**
 * Update a specific Projet
 */
export const projetsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjetsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProjetsControllerUpdateResponse, ProjetsControllerUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projets/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const projetsControllerGetExtraFields = <ThrowOnError extends boolean = false>(options: Options<ProjetsControllerGetExtraFieldsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjetsControllerGetExtraFieldsResponse, ProjetsControllerGetExtraFieldsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projets/{id}/extra-fields',
        ...options
    });
};

export const projetsControllerUpdateExtraFields = <ThrowOnError extends boolean = false>(options: Options<ProjetsControllerUpdateExtraFieldsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjetsControllerUpdateExtraFieldsResponse, ProjetsControllerUpdateExtraFieldsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projets/{id}/extra-fields',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create new Projets in bulk
 */
export const projetsControllerCreateBulk = <ThrowOnError extends boolean = false>(options: Options<ProjetsControllerCreateBulkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjetsControllerCreateBulkResponse, ProjetsControllerCreateBulkError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projets/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all services corresponding to a project
 */
export const servicesControllerGetServicesByProjectId = <ThrowOnError extends boolean = false>(options: Options<ServicesControllerGetServicesByProjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ServicesControllerGetServicesByProjectIdResponse, ServicesControllerGetServicesByProjectIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/project/{id}',
        ...options
    });
};

/**
 * Create a new service
 */
export const servicesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ServicesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ServicesControllerCreateResponse, ServicesControllerCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a new service context for a specific service to match some projects
 */
export const servicesControllerCreateServiceContext = <ThrowOnError extends boolean = false>(options: Options<ServicesControllerCreateServiceContextData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ServicesControllerCreateServiceContextResponse, ServicesControllerCreateServiceContextError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/contexts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};